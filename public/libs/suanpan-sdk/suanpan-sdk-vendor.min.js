/*! suanpan-sdk - 0.9.139 */
!function(n,g){"object"==typeof exports&&"object"==typeof module?module.exports=g():"function"==typeof define&&define.amd?define([],g):"object"==typeof exports?exports["suanpan-sdk"]=g():n["suanpan-sdk"]=g()}(window,(function(){return function(n){var g={};function I(e){if(g[e])return g[e].exports;var t=g[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,I),t.l=!0,t.exports}return I.m=n,I.c=g,I.d=function(n,g,e){I.o(n,g)||Object.defineProperty(n,g,{enumerable:!0,get:e})},I.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},I.t=function(n,g){if(1&g&&(n=I(n)),8&g)return n;if(4&g&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(I.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&g&&"string"!=typeof n)for(var t in n)I.d(e,t,function(g){return n[g]}.bind(null,t));return e},I.n=function(n){var g=n&&n.__esModule?function(){return n.default}:function(){return n};return I.d(g,"a",g),g},I.o=function(n,g){return Object.prototype.hasOwnProperty.call(n,g)},I.p="",I(I.s=17)}({17:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/socket/index.js\nfunction init(opts) {\n  var s = {};\n  var defaultOpts = {\n    url: \"/\",\n    onConnect: console.info,\n    onDisconnect: console.info\n  };\n  opts = Object.assign(defaultOpts, opts);\n  var socket = io(opts.url, opts);\n  socket.on(\"connect\", function () {\n    console.log('socket connected', socket.id);\n\n    if (opts.onConnect) {\n      opts.onConnect();\n    }\n  });\n  socket.on(\"disconnect\", function () {\n    console.log('socket disconnected');\n\n    if (opts.onDisconnect) {\n      opts.onDisconnect();\n    }\n  });\n\n  function subscribe(opts) {\n    var defaultOpts = {\n      eventName: \"call\"\n    };\n    opts = Object.assign(defaultOpts, opts);\n\n    if (!opts.callback) {\n      throw Error(\"Callback is not defined.\");\n    }\n\n    socket.on(opts.eventName, opts.callback);\n  }\n\n  function send(opts) {\n    var defaultOpts = {\n      eventName: \"call\"\n    };\n    opts = Object.assign(defaultOpts, opts);\n\n    if (!opts.data) {\n      throw Error(\"No data to be send.\");\n    }\n\n    socket.emit(opts.eventName, opts.data);\n  }\n\n  function sendFile(oss_path) {\n    var files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (s.oss) {\n      return new Promise(function (resolve, reject) {\n        try {\n          var filePromise = [];\n          var keys = [];\n\n          for (var curr = 0; curr < files.length; curr++) {\n            var key = oss_path + files[curr].name;\n            keys.push(key);\n            filePromise.push(s.oss.putObject(key, files[curr]));\n          }\n\n          Promise.all(filePromise).then(function (results) {\n            var failed = results.find(function (result) {\n              return result.success === false;\n            });\n\n            if (failed) {\n              reject(failed.msg);\n            } else {\n              send({\n                eventName: 'fileUpload',\n                data: keys\n              });\n              resolve(keys);\n            }\n          }, function (error) {\n            reject(error);\n          })[\"catch\"](function (err) {\n            reject(err);\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }\n\n  function throttle(throttleOpts) {\n    var defaultThrottleOpts = {\n      argsMergeFunc: function argsMergeFunc(args) {\n        return args[args.length - 1];\n      }\n    };\n    throttleOpts = Object.assign(defaultThrottleOpts, throttleOpts);\n\n    if (!throttleOpts.timeout) {\n      return throttleOpts.func;\n    }\n\n    var throttleMapping = {};\n    return function (opts) {\n      var _this = this;\n\n      var defaultOpts = {\n        eventName: \"call\"\n      };\n      opts = Object.assign(defaultOpts, opts);\n\n      if (!opts.data) {\n        throw Error(\"No data to be send.\");\n      }\n\n      throttleMapping[opts.eventName] = throttleMapping[opts.eventName] || {\n        args: []\n      };\n      throttleMapping[opts.eventName].args.push(opts);\n\n      if (throttleMapping[opts.eventName].timer) {\n        clearTimeout(throttleMapping[opts.eventName].timer);\n      }\n\n      return new Promise(function (resolve, reject) {\n        throttleMapping[opts.eventName].timer = setTimeout(function () {\n          try {\n            var mergedOpts = throttleOpts.argsMergeFunc(throttleMapping[opts.eventName].args);\n            var result = throttleOpts.func.call(_this, mergedOpts);\n            resolve(result);\n          } catch (err) {\n            reject(err);\n          } finally {\n            throttleMapping[opts.eventName].args = [];\n          }\n        }, throttleOpts.timeout);\n      });\n    };\n  }\n\n  s = {\n    subscribe: subscribe,\n    send: send,\n    sendFile: sendFile,\n    throttle: throttle,\n    defaultThrottleSend: throttle({\n      func: send,\n      timeout: 1000\n    })\n  };\n  return s;\n}\n// CONCATENATED MODULE: ./node_modules/whatwg-fetch/fetch.js\nvar support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      resolve(new Response(body, options))\n    }\n\n    xhr.onerror = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.ontimeout = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.onabort = function() {\n      reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    xhr.open(request.method, request.url, true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr && support.blob) {\n      xhr.responseType = 'blob'\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n\n// CONCATENATED MODULE: ./src/oss/remoteService.js\n\nvar remoteService_s = {};\n\nvar wrapUrl = function wrapUrl(url) {\n  return url;\n};\n\nvar processResponse = function processResponse(response, type) {\n  switch (type) {\n    case 'arrayBuffer':\n      return response.arrayBuffer();\n\n    case 'blob':\n      return response.blob();\n\n    case 'json':\n      return response.json();\n  }\n\n  return response.text();\n};\n\nremoteService_s.get = function (url, responseType) {\n  return new Promise(function (resolve, reject) {\n    fetch(url).then(function (response) {\n      return processResponse(response, responseType);\n    }).then(function (result) {\n      resolve(result);\n    })[\"catch\"](function (ex) {\n      reject(ex);\n    });\n  });\n};\n\nremoteService_s.post = function (url, data, contentType, responseType) {\n  return new Promise(function (resolve, reject) {\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': contentType || 'application/octet-stream;'\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return processResponse(response, responseType);\n    }).then(function (result) {\n      resolve(result);\n    })[\"catch\"](function (ex) {\n      reject(ex);\n    });\n  });\n};\n\nremoteService_s.head = function (url, responseType) {\n  return new Promise(function (resolve, reject) {\n    fetch(url, {\n      method: 'HEAD'\n    }).then(function (response) {\n      return processResponse(response, responseType);\n    }).then(function (result) {\n      resolve(result);\n    })[\"catch\"](function (ex) {\n      reject(ex);\n    });\n  });\n};\n\nremoteService_s[\"delete\"] = function (url, responseType) {\n  return new Promise(function (resolve, reject) {\n    fetch(url, {\n      method: 'DELETE'\n    }).then(function (response) {\n      return processResponse(response, responseType);\n    }).then(function (result) {\n      resolve(result);\n    })[\"catch\"](function (ex) {\n      reject(ex);\n    });\n  });\n};\n\nremoteService_s.put = function (url, data, contentType, responseType) {\n  return new Promise(function (resolve, reject) {\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': contentType || \"application/octet-stream;\"\n      },\n      body: data,\n      transformRequest: []\n    }).then(function (response) {\n      return processResponse(response, responseType);\n    }).then(function (result) {\n      resolve(result);\n    })[\"catch\"](function (ex) {\n      reject(ex);\n    });\n  });\n};\n\n/* harmony default export */ var remoteService = (remoteService_s);\n// CONCATENATED MODULE: ./src/oss/ossService.js\n\n/**\n * @return {string}\n */\n\nvar Utf8ArrayToStr = function Utf8ArrayToStr(array) {\n  var out, i, len, c;\n  var char2, char3;\n  out = \"\";\n  len = array.length;\n  i = 0;\n\n  while (i < len) {\n    c = array[i++];\n\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n\n      case 12:\n      case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);\n        break;\n\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);\n        break;\n    }\n  }\n\n  return out;\n};\n/*\n* options = {\n*   type: '',\n*   tokenPath: '',\n*   region: '',\n*   bucket: ''\n* }\n*\n* */\n\n\nfunction ossService_init(options) {\n  var _stsToken = '';\n\n  var _oss;\n\n  var loading = false;\n  var deferredList = [];\n  options.tokenServer = options.tokenServer || '';\n  options.tokenPath = options.tokenPath || '/oss/token';\n\n  var getStsToken = function getStsToken() {\n    return new Promise(function (resolve, reject) {\n      if (_stsToken && _stsToken.Credentials && _stsToken.Credentials.Expiration && new Date(_stsToken.Credentials.Expiration).getTime() - new Date().getTime() > 1800000) {\n        resolve({\n          token: _stsToken,\n          refresh: false\n        });\n      } else {\n        if (loading) {\n          deferredList.push({\n            resolve: resolve,\n            reject: reject\n          });\n        } else {\n          loading = true;\n          console.info('sts token timeout, refresh');\n          remoteService.get(options.tokenServer + options.tokenPath, 'json').then(function (token) {\n            _stsToken = token;\n            resolve({\n              token: token,\n              refresh: true\n            });\n\n            while (deferredList.length) {\n              var d = deferredList.pop();\n              d.resolve({\n                token: token,\n                refresh: true\n              });\n            }\n          })[\"catch\"](function (e) {\n            reject(e);\n\n            while (deferredList.length) {\n              var d = deferredList.pop();\n              d.reject(err);\n            }\n          })[\"finally\"](function () {\n            loading = false;\n          });\n        }\n      }\n    });\n  };\n\n  var getOss = function getOss() {\n    return new Promise(function (resolve, reject) {\n      getStsToken().then(function (result) {\n        var token = result.token;\n        console.log('token: ', token);\n\n        if (!_oss || result.refresh) {\n          _oss = new window.OSS({\n            region: token.region,\n            accessKeyId: token.Credentials.AccessKeyId,\n            accessKeySecret: token.Credentials.AccessKeySecret,\n            stsToken: token.Credentials.SecurityToken,\n            bucket: token.bucket\n          });\n          resolve(_oss);\n        } else {\n          resolve(_oss);\n        }\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var upload = function upload(file, key, progress, error, complete) {\n    return new Promise(function (resolve, reject) {\n      getOss().then(function (oss) {\n        var options = {\n          progress: progress,\n          partSize: 500 * 1024,\n          timeout: 60000\n        };\n        oss.multipartUpload(key, file, options).then(function (res) {\n          console.log('upload success: %j', res);\n          complete(res); // currentCheckpoint = null;\n          // uploadFileClient = null;\n        })[\"catch\"](function (err) {\n          if (oss.isCancel()) {\n            console.log('stop-upload!');\n          } else {\n            console.error(err);\n            console.log(\"err.name : \".concat(err.name));\n            console.log(\"err.message : \".concat(err.message));\n\n            if (err.name.toLowerCase().indexOf('connectiontimeout') !== -1) {\n              // timeout retry\n              console.log('connectiontimeout'); // if (retryCount < retryCountMax) {\n              //   retryCount++;\n              //   console.error(`retryCount : ${retryCount}`);\n              //   upload('');\n              // }\n            }\n          }\n        });\n        resolve();\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var getObject = function getObject(key, isBinary) {\n    return new Promise(function (resolve, reject) {\n      getOss().then(function (oss) {\n        oss.get(key).then(function (res) {\n          if (isBinary) {\n            return resolve(res.content);\n          }\n\n          resolve(Utf8ArrayToStr(res.content));\n        })[\"catch\"](function (err) {\n          reject(err);\n        });\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var deleteObject = function deleteObject(key) {\n    return new Promise(function (resolve, reject) {\n      getOss().then(function (oss) {\n        oss[\"delete\"](key).then(function (res) {\n          resolve(res);\n        }, function (err) {\n          reject(err);\n        });\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var listObject = function listObject(key) {\n    return new Promise(function (resolve, reject) {\n      getOss().then(function (oss) {\n        oss.list({\n          'prefix': key,\n          'max-keys': 1000\n        }).then(function (result) {\n          resolve(result);\n        });\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var getSignedUrl = function getSignedUrl(key) {\n    return new Promise(function (resolve, reject) {\n      getOss().then(function (oss) {\n        resolve(oss.signatureUrl(key, {\n          expires: 3600\n        }));\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var putObject = function putObject(key, data) {\n    return new Promise(function (resolve, reject) {\n      getOss().then(function (oss) {\n        oss.put(key, data).then(function (result) {\n          resolve(result);\n        })[\"catch\"](function (e) {\n          reject(e);\n        });\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var getObject2 = function getObject2(key, isBinary) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/get', {\n        Key: key\n      }, 'application/json', 'json').then(function (res) {\n        remoteService.get(res.data, isBinary ? 'arrayBuffer' : 'text').then(function (r) {\n          if (isBinary) {\n            resolve(new Uint8Array(r));\n            return;\n          }\n\n          resolve(r);\n        }, function (err) {\n          reject(err);\n        });\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var deleteObject2 = function deleteObject2(key) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/delete', {\n        Key: key\n      }, 'application/json', 'json').then(function (res) {\n        remoteService[\"delete\"](res.data, 'text').then(function (r) {\n          resolve(r);\n        }, function (err) {\n          reject(err);\n        });\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var listObject2 = function listObject2(key) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/list', {\n        Key: key\n      }, 'application/json', 'json').then(function (res) {\n        resolve(res.data);\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var headObject2 = function headObject2(key) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/head', {\n        Key: key\n      }, 'application/json', 'json').then(function (res) {\n        res.NextAppendPosition = res.ContentLength;\n        resolve(res);\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var getSignedUrl2 = function getSignedUrl2(key, isBinary) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/get', {\n        Key: key\n      }, 'application/json', 'json').then(function (res) {\n        resolve(res.data);\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var putObject2 = function putObject2(key, body) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/put', {\n        Key: key,\n        Expires: 0,\n        CacheControl: 'no-cache, must-revalidate'\n      }, 'application/json', 'json').then(function (res) {\n        if (!res.success) {\n          reject(res);\n          return;\n        }\n\n        if (res.data) {\n          remoteService.put(res.data, body).then(function (res) {\n            resolve(res);\n          }, function (err) {\n            reject(err);\n          });\n        }\n      }, function (err) {\n        reject(err);\n      })[\"catch\"](function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var upload2 = function upload2(file, key, onprogress, onerror, oncomplete) {\n    return new Promise(function (resolve, reject) {\n      remoteService.post(options.tokenServer + '/oss/object/put', {\n        Key: key\n      }, 'application/json', 'json').then(function (res) {\n        var xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n          if (xhr.status === 200) {\n            oncomplete();\n          } else {\n            onerror(xhr.statusText);\n          }\n        };\n\n        xhr.onprogress = function (evt) {\n          onprogress(evt);\n        };\n\n        xhr.open('PUT', res.data, true);\n        xhr.send(file);\n        resolve(res);\n      }, function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  var s = {\n    getOss: getOss,\n    upload: upload,\n    getObject: getObject,\n    putObject: putObject,\n    deleteObject: deleteObject,\n    listObject: listObject2,\n    getSignedUrl: getSignedUrl\n  };\n\n  if (options.type !== 'oss') {\n    s.getObject = getObject2;\n    s.putObject = putObject2;\n    s.headObject = headObject2;\n    s.upload = upload2;\n    s.deleteObject = deleteObject2;\n    s.listObject = listObject2;\n    s.getSignedUrl = getSignedUrl2;\n  }\n\n  return s;\n}\n;\n// CONCATENATED MODULE: ./src/index.js\n\n\n/*\nopts = {\n  url: '',\n  path: '/ui',\n  dashboardPlugins: true|false,\n  onConnect: function(a, b) {\n    console.log(a,b,\"======2222=====\")\n  },\n  onDisconnect:function(a, b) {\n    console.log(a,b,\"=====111======\")\n  },\n  oss: {\n    type: 'oss|minio',\n    tokenPath: '/oss/token',\n  }\n}\n*/\n\nwindow.sp = function (opts) {\n  var s = {};\n\n  if (opts.path) {\n    s = init(opts);\n  }\n\n  if (opts.oss) {\n    s.oss = ossService_init(opts.oss);\n  }\n\n  return s;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")}})}));